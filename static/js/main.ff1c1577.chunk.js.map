{"version":3,"sources":["components/enums/FilterBy.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterBy","TodoItem","memo","todo","selectedTodo","onButtonClick","id","title","completed","className","classNames","type","onClick","TodoList","todos","map","TodoFilter","setFilteredTodos","useState","All","completedFilter","setCompletedFilter","query","setQuery","useEffect","filteredTodosBySelect","Active","filter","Completed","getFilteredTodosBySelect","normalizedQuery","toLowerCase","trim","filteredByQuery","includes","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","React","onCloseButtonClick","user","setUser","isLoading","setIsLoading","getFoundUser","a","foundUser","href","email","name","App","setTodos","visibleTodos","setVisibleTodos","setSelectedTodo","getTodosFromServer","todosFromServer","handleSelect","useCallback","resetSelectedTodo","filteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff1c1577.chunk.js","sourcesContent":["export enum FilterBy {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { memo } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  selectedTodo: Todo | null;\n  onButtonClick: (todo: Todo) => void;\n};\n\nexport const TodoItem: React.FC<Props> = memo(({\n  todo,\n  selectedTodo,\n  onButtonClick,\n}) => {\n  const { id, title, completed } = todo;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className=\"\"\n      key={id}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          })}\n        >\n          {title}\n\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onButtonClick(todo)}\n        >\n          <span className=\"icon\">\n            <i className={classNames('far', {\n              'fa-eye': id !== selectedTodo?.id,\n              'fa-eye-slash': id === selectedTodo?.id,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n});\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  onButtonClick: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  onButtonClick,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          selectedTodo={selectedTodo}\n          onButtonClick={onButtonClick}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import { memo, useEffect, useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { FilterBy } from '../enums/FilterBy';\n\ntype Props = {\n  todos: Todo[];\n  setFilteredTodos: (newTodos: Todo[]) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = memo(({\n  todos,\n  setFilteredTodos,\n}) => {\n  const [completedFilter, setCompletedFilter] = useState(FilterBy.All);\n  const [query, setQuery] = useState('');\n\n  const getFilteredTodosBySelect = () => {\n    switch (completedFilter) {\n      case FilterBy.Active:\n        return todos.filter(({ completed }) => !completed);\n\n      case FilterBy.Completed:\n        return todos.filter(({ completed }) => completed);\n\n      default:\n        return todos;\n    }\n  };\n\n  useEffect(() => {\n    const filteredTodosBySelect = getFilteredTodosBySelect();\n\n    const normalizedQuery = query.toLowerCase().trim();\n\n    const filteredByQuery = filteredTodosBySelect.filter(\n      ({ title }) => {\n        const normalizedTitle = title.toLowerCase();\n\n        return normalizedTitle.includes(normalizedQuery);\n      },\n    );\n\n    setFilteredTodos(filteredByQuery);\n  }, [query, completedFilter]);\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    switch (value) {\n      case FilterBy.Active:\n        setCompletedFilter(FilterBy.Active);\n        break;\n\n      case FilterBy.Completed:\n        setCompletedFilter(FilterBy.Completed);\n        break;\n\n      default:\n        setCompletedFilter(FilterBy.All);\n        break;\n    }\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={completedFilter}\n            onChange={handleSelectChange}\n          >\n            <option value={FilterBy.All}>All</option>\n            <option value={FilterBy.Active}>Active</option>\n            <option value={FilterBy.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todo: Todo;\n  onCloseButtonClick: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = React.memo(({\n  todo,\n  onCloseButtonClick,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getFoundUser = async () => {\n    const foundUser = await getUser(userId);\n\n    setUser(foundUser);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    getFoundUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onCloseButtonClick()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const getTodosFromServer = async () => {\n    setIsLoading(true);\n\n    const todosFromServer = await getTodos();\n\n    setTodos(todosFromServer);\n    setVisibleTodos(todosFromServer);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const handleSelect = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, []);\n\n  const resetSelectedTodo = useCallback(() => {\n    setSelectedTodo(null);\n  }, []);\n\n  const setFilteredTodos = useCallback((filteredTodos: Todo[]) => {\n    setVisibleTodos(filteredTodos);\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter todos={todos} setFilteredTodos={setFilteredTodos} />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodo={selectedTodo}\n                    onButtonClick={handleSelect}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onCloseButtonClick={resetSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}